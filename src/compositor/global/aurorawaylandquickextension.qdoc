/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
 * \headerfile <WaylandQuickExtension>
 * \title Qt Wayland Compositor Qt Quick Extension Macro Declarations
 * \inmodule AuroraCompositor
 * \ingroup funclists
 *
 * \brief The <WaylandQuickExtension> header file includes \l{macros} for creating Qt Quick types
 * that correspond to subclasses of WaylandCompositorExtension and WaylandObject.
 *
 * If you are creating extensions to Qt Wayland Compositor, the macros in the WaylandQuickExtension
 * header may be a useful alternative to manually implementing the required parts for each class.
 *
 * \sa {Qt Wayland Compositor Examples - Custom Shell}
 */

/*!
 * \macro Q_COMPOSITOR_DECLARE_QUICK_EXTENSION_CLASS(className)
 * \relates <WaylandQuickExtension>
 *
 * This macro can be used to define a Qt Quick class based on a Wayland extension. It defines
 * a new class which inherits from \a className and which suffixes the name with "QuickExtension".
 *
 * The class should be a subclass of WaylandCompositorExtension, and
 * \l{WaylandCompositorExtension::initialize()} will be called automatically. The type must be
 * manually registered in Qt Quick using \l{qmlRegisterType()}.
 *
 * \sa Q_COMPOSITOR_DECLARE_QUICK_EXTENSION_NAMED_CLASS
 */

/*!
 * \macro Q_COMPOSITOR_DECLARE_QUICK_EXTENSION_CONTAINER_CLASS(className)
 * \relates <WaylandQuickExtension>
 *
 * This macro can be used to define a Qt Quick class intended to contain Wayland extensions. It
 *
 * It defines a new class which inherits from \a className and which suffixes the name with
 * "QuickExtensionContainer". The class given by \a className should inherit from WaylandObject,
 * and the new class will have an \c extensions property which manages the extensions by calling
 * \l{WaylandObject::addExtension()}{addExtension()} and
 * \l{WaylandObject::removeExtension()}{removeExtension()} in the base class.
 *
 * The type must be manually registered in Qt Quick using \l{qmlRegisterType()}.
 */

/*!
 * \macro Q_COMPOSITOR_DECLARE_QUICK_EXTENSION_NAMED_CLASS(className, QmlType)
 * \relates <WaylandQuickExtension>
 *
 * This macro can be used to define a Qt Quick class based on a Wayland extension. It defines
 * a new class which inherits from \a className and which suffixes the name with "QuickExtension".
 *
 * The macro works the same as \l{Q_COMPOSITOR_DECLARE_QUICK_EXTENSION_CLASS}, but will also
 * automatically register the new type as \a QmlType in Qt Quick.
 */
